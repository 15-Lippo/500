import React, { useState } from 'react';
import { useWallet } from '@solana/wallet-adapter-react';
import { Connection, PublicKey, Transaction } from '@solana/web3.js';
import { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';

function App() {
    const { connected, publicKey, sendTransaction } = useWallet();
    const [statusMessage, setStatusMessage] = useState('');
    const [walletAddress, setWalletAddress] = useState('');

    // Funzione per trasferire token SPL
    const transferSPLToken = async () => {
        if (!connected || !publicKey) {
            setStatusMessage('Wallet non connesso.');
            return;
        }

        setStatusMessage('Transazione in corso...');

        // Configura la connessione a Solana
        const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');

        // Verifica il saldo SOL del wallet
        try {
            const balance = await connection.getBalance(publicKey);
            if (balance < 5000) {
                setStatusMessage('Saldo SOL insufficiente per coprire le fee di transazione.');
                return;
            }
        } catch (error) {
            console.error("Errore durante il controllo del saldo SOL:", error);
            setStatusMessage('Errore durante il controllo del saldo SOL.');
            return;
        }

        // Indirizzo del token SPL (sostituisci con il tuo token mint address)
        const tokenMintAddress = new PublicKey('YourTokenMintAddressHere');

        // Indirizzo del wallet del destinatario (sostituisci con l'indirizzo del destinatario)
        const recipientAddress = new PublicKey('RecipientPublicKeyHere');

        // QuantitÃ  di token da trasferire (es. 100 token, supponendo 9 decimali)
        const amount = 100 * (10 ** 9);

        // Creazione della transazione
        const transaction = new Transaction().add(
            Token.createTransferInstruction(
                TOKEN_PROGRAM_ID,
                publicKey, // Indirizzo del mittente
                recipientAddress, // Indirizzo del destinatario
                publicKey, // Indirizzo del proprietario
                [],
                amount
            )
        );

        // Firma e invio della transazione
        try {
            const signature = await sendTransaction(transaction, connection);
            setStatusMessage(`Transazione inviata! Signature: ${signature}`);
        } catch (error) {
            console.error("Errore durante l'invio della transazione:", error);
            setStatusMessage("Errore durante l'invio della transazione.");
        }
    };

    return (
        <div>
            <h1>500 Crypto</h1>
            <button onClick={transferSPLToken} disabled={!connected}>
                Acquista Ora
            </button>
            <div>{statusMessage}</div>
            <div>{connected ? `Wallet connesso: ${publicKey.toString()}` : 'Wallet non connesso'}</div>
        </div>
    );
}

export default App;
